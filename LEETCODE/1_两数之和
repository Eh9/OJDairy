给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]


```
//思路: 排序后用滑动窗口的方法找出结果 复杂度为nlog(n) + n = nlog(n)

class Solution {
public:
	vector<int> twoSum(vector<int>& nums, int target) {
		vector<int> res(2, 0);
		int len = nums.size();
		vector<int> index(len, 0);//序号数组
		for (int i = 0; i != len; ++i)
			index[i] = i;

		myQuickSort(nums, index, 0, len - 1);

		--len;
		for (int i = 0; i < len; )
		{
			if (nums[i] + nums[len] == target)
			{
				res[0] = index[i];
				res[1] = index[len];
				break;
			}
			else if (nums[i] + nums[len] < target)
				++i;
			else
				--len;
		}
		return res;
	}

	void myQuickSort(vector<int>& nums, vector<int>& index, int l, int r) //区间[l,r] 对序号数组同步交换
	{
		if (l >= r)
			return;
		int povit = nums[l], idx = l + 1;
		for(int i = idx; i <= r; ++ i)
			if (nums[i] <= povit) {
				swap(nums[i], nums[idx]);
				swap(index[i], index[idx]);
				++idx;
			}
		--idx;
		swap(nums[idx], nums[l]);
		swap(index[idx], index[l]);
		myQuickSort(nums, index, l, idx - 1);
		myQuickSort(nums, index, idx + 1, r);
	}
};
```
